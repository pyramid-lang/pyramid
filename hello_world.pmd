/*
nearleyc grammar.ne > grammar.js;nearley-test grammar.js --quiet < test_input.pmd
*/
/*
 * This is a block comment and can span several lines.
 * Here is the 2nd line, for demonstration purposes.
 */

/**
 * This is a doc-string...
 */
if true { //this is a comment

}


//all valid types
let no = false

let (a, b) = (3, 5)
let (a:u32, b:u8) = (3,5)


u32 min_unsigned_int = 0
u32 max_unsigned_int = 4294967295
i32 min_signed_int = -2147483648
i32 max_signed_int = 2147483647

f32 float_32 = 3.141592653589
f64 float_64 = -0.5

let test = 5 * 6 / 7
//Type annotations are optional
let a_bool_var = true

let mailbox_empty = true
let is_raining = true

let should_get_mail = mailbox_empty & not is_raining
let favorite_number = 42

if should_get_mail {

}else if favorite_number == 7 {

} else {

}

while num == 7 & is_raining {

}


asdf(bool a, string b, u32 c){
  return 17
}


asdf(true, "msg", 3)

asdf(a: true, b: "msg", c: 3)

asdf(
  a: true,
  b: "msg",
  c: 3
)









func asdf(a1:u32 ,b,c,d,e){
  return 17
}

/* Potential future features */
/********************************************
var alice = Person{age: 7, name: "Alice"}
var bob = Person::new(age: 7, name: "Bob")
var bob_age = bob.get_age()


class Person{
  age: u32
  name: string
  description: string?

  public static new(age: u32, : u32):Self{

  }

  public get_age(){
    self.age
  }
}

trait Meta{

}

impl Meta for Person{

}


default Person{
  age: 3
  name: "Chris"
}

var chris_age = Person.get_age()
var chris = Person::default
